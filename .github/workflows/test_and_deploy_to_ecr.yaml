name: Test and deploy to ECR

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  ECR_REPOSITORY: devops-boot
  CONTAINER_NAME: fastapi_app
  AWS_REGION: us-east-1 # Used for a public registry

jobs:
  test:
    name: Application unittests and flake8 tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install pytest and flake8
        run: |
          pip install pytest
          pip install flake8

      - name: Run tests
        run: |
          pytest

      - name: Run flake8
        uses: py-actions/flake8@v2

  build:
    name: Build Image
    runs-on: ubuntu-latest
    needs: test # Only run if tests execute successfully

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          ECR_REGISTRY_ALIAS: v4m5s6o6 # Alias generated by AWS: https://gallery.ecr.aws/v4m5s6o6/devops-boot
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REGISTRY_ALIAS/$ECR_REPOSITORY:$IMAGE_TAG app/
          docker build -t $ECR_REGISTRY/$ECR_REGISTRY_ALIAS/$ECR_REPOSITORY:latest app/
          docker push $ECR_REGISTRY/$ECR_REGISTRY_ALIAS/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REGISTRY_ALIAS/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REGISTRY_ALIAS/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
